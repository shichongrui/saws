{
  "version": 3,
  "sources": ["<stdin>", "../app/entry.server.tsx", "../app/root.tsx", "../app/routes/_index.tsx", "../../../libraries.ts", "../../../libraries/api/index.ts", "../../../libraries/api/GraphQLAPI.ts", "../../../libraries/api/API.ts", "../../../libraries/api/RestAPI.ts", "../../../helpers/aws/cognito.ts", "../../../utils/uppercase.ts", "../../../utils/parameterized-env-var-name.ts", "../../../libraries/auth.ts", "../../../helpers/aws/s3.ts", "../../../libraries/file-storage.ts", "../../../libraries/functions.ts", "../../../libraries/postgres.ts", "../../../libraries/remix/remix-app.ts", "../../../utils/binary-types.ts", "../../../libraries/remix/create-file-upload-handler.ts", "../../../libraries/remix/multipart-form-data.ts", "../../../helpers/aws/ssm.ts", "../../../utils/constants.ts", "../../../libraries/secrets.ts", "../../../libraries/translate.ts", "../app/utils/prisma.server.ts", "../app/utils/functions.server.ts", "../app/utils/file-storage.server.ts", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "import * as React from \"react\";\nimport { renderToString } from \"react-dom/server\";\nimport { RemixServer } from \"@remix-run/react\";\nimport type { EntryContext } from \"@remix-run/node\"; // Depends on the runtime you choose\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  const markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(`<!DOCTYPE html>${markup}`, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import * as React from \"react\";\nimport { LinksFunction, json } from \"@remix-run/node\";\nimport {\n  Links,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  MetaFunction,\n  LiveReload,\n  useLoaderData,\n} from \"@remix-run/react\";\n\nexport const meta: MetaFunction = () => [\n  {\n    charset: \"utf-8\",\n  },\n  {\n    title: \"PM Docs\",\n  },\n  {\n    viewport: \"width=device-width,initial-scale=1\",\n  },\n];\n\nexport let links: LinksFunction = () => {\n  return [\n    { rel: \"preconnect\", href: \"https://fonts.googleapis.com\" },\n    { rel: \"preconnect\", href: \"https://fonts.gstatic.com\" },\n    {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\",\n    },\n  ];\n};\n\ninterface DocumentProps {\n  children: React.ReactElement;\n}\n\nconst Document = ({ children }: DocumentProps, emotionCache) => {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n};\n\nexport default function App() {\n  return (\n    <Document>\n      <Outlet />\n    </Document>\n  );\n}\n", "import * as React from \"react\";\nimport { LoaderFunctionArgs, json } from \"@remix-run/node\";\nimport { prisma } from \"../utils/prisma.server\";\nimport { useLoaderData } from '@remix-run/react';\nimport { functionsClient } from '../utils/functions.server';\nimport { files } from '../utils/file-storage.server';\n\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\n  const users = await prisma.user.findMany();\n\n  const result = await functionsClient.call<{ event: { test: boolean } }>('saws-example-function', {\n    test: true,\n  })\n\n  const fileUrl = await files.getFileUrl('/1.png')\n\n  return json({\n    users,\n    result,\n    fileUrl,\n  });\n};\n\nexport default () => {\n  const data = useLoaderData<typeof loader>()\n  console.log(data)\n  return (\n    <div>\n      <p>Hello world!</p>\n      <p>{String(data.result?.event.test)}</p>\n      <ul>\n        {data.users.map(user => (\n          <li key={user.id}>{user.first_name} {user.last_name}</li>\n        ))}\n      </ul>\n      <img src={data.fileUrl} />\n    </div>\n  );\n};\n", "export * from './libraries/api';\nexport * from './libraries/auth';\nexport * from './libraries/file-storage';\nexport * from './libraries/functions';\nexport * from './libraries/postgres';\nexport * from './libraries/remix';\nexport * from './libraries/secrets';\nexport * from './libraries/translate';", "export * from './GraphQLAPI'\nexport * from './RestAPI'", "import type { IExecutableSchemaDefinition } from \"@graphql-tools/schema\";\nimport type { APIGatewayProxyHandler } from \"aws-lambda\";\nimport { ApolloServer } from \"apollo-server-lambda\";\nimport { API } from \"./API\";\n\nexport type ApolloContext = {\n  user: {\n    userId: string;\n    username: string;\n  };\n  authToken: string;\n};\n\ntype APIConstructor = {\n  typeDefs: IExecutableSchemaDefinition<ApolloContext>[\"typeDefs\"];\n  resolvers: IExecutableSchemaDefinition<ApolloContext>[\"resolvers\"];\n  onError?: (err: Error, user: { userId: string }) => void;\n};\n\nexport class GraphQLAPI extends API {\n  apolloServer: ApolloServer;\n  sourceMap?: string;\n\n  constructor({ typeDefs, resolvers, onError }: APIConstructor) {\n    super();\n    this.user = { userId: \"\", username: \"\" };\n    this.token = \"\";\n    this.apolloServer = new ApolloServer({\n      typeDefs,\n      resolvers,\n      csrfPrevention: true,\n      context: () => ({\n        user: this.user,\n        authToken: this.token,\n      }),\n      plugins: [\n        {\n          requestDidStart() {\n            return Promise.resolve({\n              didEncounterErrors(requestContext) {\n                const context = requestContext.context;\n\n                for (const error of requestContext.errors) {\n                  const err = error.originalError || error;\n\n                  console.error(\"Error while processing request\", err);\n                  onError?.(err, context.user);\n                }\n                return Promise.resolve();\n              },\n            });\n          },\n        },\n      ],\n    });\n  }\n\n  createLambdaHandler = (): APIGatewayProxyHandler => {\n    const handler = this.apolloServer.createHandler();\n    return async (event, context, callback) => {\n      context.callbackWaitsForEmptyEventLoop = false;\n\n      this.authenticateRequest(event);\n      this.logEvent(event);\n\n      try {\n        const results = await handler(event, context, () => {});\n        callback(null, results);\n        return results;\n      } catch (error) {\n        console.error(\n          \"Error while processing request\",\n          JSON.stringify(error, null, 2)\n        );\n        callback(error as Error);\n      }\n    };\n  };\n}\n\nexport * from \"apollo-server-lambda\";\nexport * from \"aws-lambda\";\nexport * from \"graphql\";\n", "import type { APIGatewayProxyEvent, APIGatewayProxyHandler } from \"aws-lambda\";\nimport { decode } from \"jsonwebtoken\";\n\nexport abstract class API {\n  user?: { userId: string; username: string };\n  token?: string;\n\n  abstract createLambdaHandler(): APIGatewayProxyHandler;\n\n  logEvent(event: APIGatewayProxyEvent) {\n    const {\n      headers: _headers,\n      multiValueHeaders: _multiValueHeaders,\n      requestContext: _requestContext,\n      ...loggableEvent\n    } = event;\n\n    console.log(\n      \"Received request\",\n      JSON.stringify(\n        {\n          ...loggableEvent,\n          body: (() => {\n            try {\n              return JSON.parse(event.body ?? \"\");\n            } catch (_) {\n              return event.body ?? \"\";\n            }\n          })(),\n          userId: this.user?.userId,\n        },\n        null,\n        2\n      )\n    );\n  }\n\n  authenticateRequest(event: APIGatewayProxyEvent) {\n    this.token = event.headers.authorization ?? event.headers.Authorization;\n    this.token = this.token?.replace(\"Bearer \", \"\") ?? \"\";\n\n    if (this.token != null) {\n      const payload = decode(this.token);\n      this.user = {\n        userId: payload?.sub as string,\n        // @ts-expect-error\n        username: payload?.username as string,\n      };\n    }\n  }\n}\n", "import { API } from \"./API\";\nimport createHandler from \"serverless-http\";\nimport { Express } from \"express\";\nimport { APIGatewayProxyHandler } from \"aws-lambda\";\n\ndeclare global {\n  namespace Express {\n    export interface Request {\n      user?: {\n        userId: string;\n        username: string;\n      }\n    }\n  }\n}\n\nexport class RestAPI extends API {\n  app: Express;\n\n  constructor(app: Express) {\n    super();\n    this.app = app;\n\n    this.app.use((req, _res, next) => {\n      req.user = this.user;\n      next();\n    })\n  }\n\n  createLambdaHandler = (): APIGatewayProxyHandler => {\n    const handler = createHandler(this.app, { provider: \"aws\" });\n    return async (event, context, callback) => {\n      context.callbackWaitsForEmptyEventLoop = false;\n\n      this.authenticateRequest(event);\n      this.logEvent(event);\n\n      try {\n        const results = await handler(event, context) as any;\n        callback(null, results);\n        return results;\n      } catch (error) {\n        console.error(\n          \"Error while processing request\",\n          JSON.stringify(error, null, 2)\n        );\n        callback(error as Error);\n      }\n    };\n  };\n}\n\nexport { default as express, Router } from 'express'", "import {\n  CognitoIdentityProviderClient,\n  ListUserPoolsCommand,\n  ListUserPoolClientsCommand,\n  CreateUserPoolCommand,\n  CreateUserPoolClientCommand,\n  SignUpCommand,\n  AdminConfirmSignUpCommand,\n  AdminGetUserCommand,\n  AdminInitiateAuthCommand,\n  DeleteUserCommand,\n  AdminCreateUserCommand,\n} from \"@aws-sdk/client-cognito-identity-provider\";\n\nexport class Cognito {\n  client: CognitoIdentityProviderClient;\n\n  constructor(stage: string) {\n    this.client = new CognitoIdentityProviderClient({\n      endpoint: stage === \"local\" ? \"http://localhost:9229\" : undefined,\n    });\n  }\n\n  async listUserPools() {\n    const command = new ListUserPoolsCommand({ MaxResults: 60 });\n\n    const results = await this.client.send(command);\n    return results;\n  }\n\n  async listUserPoolClients(userPoolId: string) {\n    const command = new ListUserPoolClientsCommand({\n      UserPoolId: userPoolId,\n    });\n\n    const results = await this.client.send(command);\n    return results;\n  }\n\n  async createUserPool(name: string) {\n    const command = new CreateUserPoolCommand({\n      PoolName: name,\n      UsernameAttributes: [\"email\"],\n      AutoVerifiedAttributes: [\"email\"],\n    });\n    const results = await this.client.send(command);\n    return results;\n  }\n\n  async createUserPoolClient(name: string, userPoolId: string) {\n    const command = new CreateUserPoolClientCommand({\n      ClientName: name,\n      UserPoolId: userPoolId,\n      ExplicitAuthFlows: [\"ALLOW_USER_SRP_AUTH\", \"ALLOW_REFRESH_TOKEN_AUTH\"],\n      GenerateSecret: false,\n      AccessTokenValidity: 1,\n      TokenValidityUnits: {\n        AccessToken: 'minutes'\n      }\n    });\n    const results = await this.client.send(command);\n    return results;\n  }\n\n  async signUpUser(\n    userPoolClientId: string,\n    username: string,\n    password: string\n  ) {\n    const command = new SignUpCommand({\n      ClientId: userPoolClientId,\n      Username: username,\n      Password: password,\n      UserAttributes: [\n        {\n          Name: \"email\",\n          Value: username,\n        },\n      ],\n    });\n    const results = await this.client.send(command);\n    return results;\n  }\n\n  async confirmUserSignUp(userPoolId: string, username: string) {\n    const command = new AdminConfirmSignUpCommand({\n      UserPoolId: userPoolId,\n      Username: username,\n    });\n    const results = await this.client.send(command);\n    return results;\n  }\n\n  async getUser(userPoolId: string, username: string) {\n    const command = new AdminGetUserCommand({\n      UserPoolId: userPoolId,\n      Username: username,\n    });\n    const results = await this.client.send(command);\n    return results;\n  }\n\n  async initiateAuth(\n    userPoolId: string,\n    userPoolClientId: string,\n    username: string,\n    password: string\n  ) {\n    const command = new AdminInitiateAuthCommand({\n      UserPoolId: userPoolId,\n      ClientId: userPoolClientId,\n      AuthFlow: \"ADMIN_USER_PASSWORD_AUTH\",\n      AuthParameters: {\n        USERNAME: username,\n        PASSWORD: password,\n      },\n    });\n\n    const results = await this.client.send(command);\n    return results;\n  }\n\n  async refreshAuth(\n    userPoolId: string,\n    userPoolClientId: string,\n    refreshToken: string,\n  ) {\n    const command = new AdminInitiateAuthCommand({\n      UserPoolId: userPoolId,\n      ClientId: userPoolClientId,\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: {\n        REFRESH_TOKEN: refreshToken,\n      }\n    })\n\n    const results = await this.client.send(command);\n    return results;\n  }\n\n  async deleteUser(token: string) {\n    const command = new DeleteUserCommand({\n      AccessToken: token,\n    });\n\n    const results = await this.client.send(command);\n    return results;\n  }\n\n  async createUser(\n    {\n      email,\n      emailVerified,\n    }: {\n      email: string;\n      emailVerified: boolean;\n    },\n    userPoolId: string\n  ) {\n    const command = new AdminCreateUserCommand({\n      UserPoolId: userPoolId,\n      Username: email,\n      UserAttributes: [\n        {\n          Name: \"email\",\n          Value: email,\n        },\n        {\n          Name: \"email_verified\",\n          Value: String(emailVerified)\n        }\n      ],\n      DesiredDeliveryMediums: [\"EMAIL\"],\n    });\n\n    const results = await this.client.send(command);\n    return results;\n  }\n}\n", "export const uppercase = (text: string) => {\n  const [first, ...rest] = text;\n  return first.toUpperCase() + rest.join(\"\");\n};\n", "import { uppercase } from \"./uppercase\";\n\nexport const parameterizedEnvVarName = (name: string, variable: string) =>\n  `${uppercase(name.replace(/[^a-zA-Z\\d]/g, \"_\"))}_${variable}`;\n", "import { Cognito } from \"../helpers/aws/cognito\";\nimport { parameterizedEnvVarName } from \"../utils/parameterized-env-var-name\";\nimport {\n  AuthenticationDetails,\n  CognitoUser,\n  CognitoUserAttribute,\n  CognitoUserPool,\n  CognitoUserSession,\n  CookieStorage,\n  ISignUpResult,\n} from \"amazon-cognito-identity-js\";\n\nexport class AuthClient {\n  client: Cognito;\n  userPoolId: string;\n  userPoolClientId: string;\n\n  constructor(name: string) {\n    const userPoolId =\n      process.env[parameterizedEnvVarName(name, \"USER_POOL_ID\")];\n    const userPoolClientId =\n      process.env[parameterizedEnvVarName(name, \"USER_POOL_CLIENT_ID\")];\n    this.client = new Cognito(process.env.STAGE ?? \"local\");\n    if (userPoolId == null || userPoolClientId == null) {\n      throw new Error(\n        \"USER_POOL_ID and USER_POOL_CLIENT_ID must be present in the environment variables\"\n      );\n    }\n    this.userPoolId = userPoolId;\n    this.userPoolClientId = userPoolClientId;\n    console.log(process.env.STAGE, userPoolId, userPoolClientId)\n  }\n\n  deleteUserFromToken(token: string) {\n    return this.client.deleteUser(token);\n  }\n\n  async createUser(email: string, emailVerified: boolean) {\n    const user = await this.client.createUser(\n      {\n        email,\n        emailVerified,\n      },\n      this.userPoolId\n    );\n    return user;\n  }\n\n  getUser(email: string) {\n    return this.client.getUser(this.userPoolId, email);\n  }\n\n  async refreshAccessToken(refreshToken: string) {\n    const response = await this.client.refreshAuth(\n      this.userPoolId,\n      this.userPoolClientId,\n      refreshToken\n    );\n\n    return response.AuthenticationResult?.AccessToken;\n  }\n}\n\nexport const captureEnvVars = (name: string) => {\n  const userPoolId = parameterizedEnvVarName(name, 'USER_POOL_ID')\n  const userPoolClientId = parameterizedEnvVarName(name, 'USER_POOL_CLIENT_ID')\n  return {\n      [userPoolId]: process.env[userPoolId],\n      [userPoolClientId]: process.env[userPoolClientId],\n  }\n}\n\n// For use in the front end\nexport class SessionClient {\n  userPool: CognitoUserPool  \n\n  constructor(name: string) {\n    const userPoolId = window.ENV[parameterizedEnvVarName(name, 'USER_POOL_ID')]\n    const userPoolClientId = window.ENV[parameterizedEnvVarName(name, 'USER_POOL_CLIENT_ID')]\n\n    this.userPool = new CognitoUserPool({\n      UserPoolId: userPoolId,\n      ClientId: userPoolClientId,\n      endpoint: window.ENV.STAGE === \"local\" ? \"http://127.0.0.1:9229\" : undefined,\n      Storage: new CookieStorage({\n        domain: window?.location?.hostname,\n        secure: window?.location?.hostname !== \"localhost\",\n        path: \"/\",\n        expires: 365,\n      }),\n    });\n  };\n  \n  getCurrentUser() {\n    return this.userPool.getCurrentUser();\n  };\n  \n  async signIn(username: string, password: string) {\n    return new Promise<CognitoUser>((resolve, reject) => {\n      const cognitoUser = new CognitoUser({\n        Username: username,\n        Pool: this.userPool,\n      });\n      cognitoUser.setAuthenticationFlowType('USER_PASSWORD_AUTH')\n      cognitoUser.authenticateUser(\n        new AuthenticationDetails({ Username: username, Password: password }),\n        {\n          onSuccess: () => {\n            resolve(cognitoUser);\n          },\n          onFailure: (err) => {\n            reject(err);\n          },\n        }\n      );\n    });\n  };\n  \n  async signUp({\n    username,\n    password,\n    attributes,\n    autoSignIn,\n  }: {\n    username: string;\n    password: string;\n    attributes: Record<string, string>;\n    autoSignIn: {\n      enabled: true;\n    };\n  }) {\n    return new Promise<ISignUpResult | undefined>((resolve, reject) => {\n      const attributeList = [];\n  \n      for (const key in attributes) {\n        attributeList.push(\n          new CognitoUserAttribute({\n            Name: key,\n            Value: attributes[key],\n          })\n        );\n      }\n  \n      this.userPool.signUp(\n        username,\n        password,\n        attributeList,\n        [],\n        async (err, result) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n  \n          if (autoSignIn && autoSignIn.enabled) {\n            try {\n              await this.signIn(username, password);\n              resolve(result);\n            } catch (signInError) {\n              reject(signInError);\n            }\n          } else {\n            resolve(result);\n          }\n        }\n      );\n    });\n  };\n  \n  async confirmSignUp(email: string, code: string) {\n    return new Promise((resolve, reject) => {\n      const userData = {\n        Username: email,\n        Pool: this.userPool,\n      };\n      const cognitoUser = new CognitoUser(userData);\n      cognitoUser.confirmRegistration(code, true, (err) => {\n        if (err) return reject(err);\n        resolve(null);\n      });\n    });\n  };\n  \n  async completeNewPassword(\n    user: CognitoUser,\n    newPassword: string\n  ) {\n    return new Promise((resolve, reject) => {\n      user.completeNewPasswordChallenge(newPassword, null, {\n        onSuccess: () => {\n          resolve(null);\n        },\n        onFailure: (err) => {\n          reject(err);\n        },\n      });\n    });\n  };\n  \n  signOut() {\n    return this.getCurrentUser()?.signOut();\n  };\n  \n  refreshTokenIfNeeded () {\n    const currentUser = this.getCurrentUser();\n    currentUser?.getSession((err: Error, session: CognitoUserSession | null) => {\n      if (err != null || session == null) return currentUser.signOut();\n  \n      if (session.isValid()) return;\n  \n      const refreshToken = session.getRefreshToken();\n      currentUser.refreshSession(refreshToken, (err) => {\n        if (err == null) return;\n        currentUser.signOut();\n      });\n    });\n  };\n  \n}", "import {\n  CreateBucketCommand,\n  GetObjectCommand,\n  HeadObjectCommand,\n  ListBucketsCommand,\n  ListObjectsV2Command,\n  PutObjectCommand,\n  S3Client,\n  S3ClientConfig,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { promises as fs } from \"fs\";\nimport mime from 'mime';\n\nexport class S3 {\n  client: S3Client\n  \n  constructor() {\n    const config: S3ClientConfig = {}\n    if (process.env.S3_ENDPOINT != null) {\n      config.endpoint = process.env.S3_ENDPOINT\n    }\n\n    if (process.env.S3_ACCESS_KEY != null || process.env.S3_SECRET_KEY != null) {\n      config.credentials = {\n        accessKeyId: String(process.env.S3_ACCESS_KEY),\n        secretAccessKey: String(process.env.S3_SECRET_KEY)\n      }\n    }\n    this.client = new S3Client(config);\n  }\n  \n  async uploadFileFromPath(\n    bucketName: string,\n    key: string,\n    filePath: string\n  ) {\n    const file = await fs.readFile(filePath);\n    return this.uploadFile(bucketName, key, file)\n  };\n\n  uploadFile(\n    bucketName: string,\n    key: string,\n    file: Uint8Array,\n  ) {\n    const contentType = mime.getType(key)\n\n    const command = new PutObjectCommand({\n      Bucket: bucketName,\n      Body: file,\n      Key: key,\n      ContentType: contentType ?? undefined\n    })\n\n    return this.client.send(command)\n  }\n  \n  async doesFileExist(bucketName: string, key: string) {\n    const command = new HeadObjectCommand({\n      Bucket: bucketName,\n      Key: key,\n    });\n  \n    try {\n      await this.client.send(command);\n      return true;\n    } catch (err: any) {\n      if (err.name === \"NotFound\") {\n        return false;\n      }\n  \n      throw err;\n    }\n  };\n\n  getFile(bucketName: string, key: string) {\n    const command = new GetObjectCommand({\n      Bucket: bucketName,\n      Key: key,\n    })\n\n    return this.client.send(command)\n  }\n\n  getPresignedFileUrl(bucketName: string, key: string) {\n    const command = new GetObjectCommand({\n      Bucket: bucketName,\n      Key: key,\n    })\n    return getSignedUrl(this.client, command, { expiresIn: 3600 })\n  }\n\n  getPresignedUploadUrl(bucketName: string, key: string) {\n    const command = new PutObjectCommand({\n      Bucket: bucketName,\n      Key: key,\n    })\n    return getSignedUrl(this.client, command, { expiresIn: 3600 })\n  }\n\n  listBuckets() {\n    const command = new ListBucketsCommand({})\n    return this.client.send(command)\n  }\n\n  createBucket(bucketName: string) {\n    const command = new CreateBucketCommand({\n      Bucket: bucketName,\n    })\n    return this.client.send(command)\n  }\n\n  listObjects(bucketName: string, prefix?: string, delimiter?: string,) {\n    const command = new ListObjectsV2Command({\n      Bucket: bucketName,\n      Prefix: prefix,\n      Delimiter: delimiter,\n    })\n    return this.client.send(command)\n  }\n}\n", "import { S3 } from '../helpers/aws/s3'\n\nexport class FileStorage {\n  name: string\n  client: S3\n\n  constructor(name: string) {\n    this.name = name;\n    this.client = new S3()\n  }\n\n  getBucketName() {\n    return `${process.env.STAGE}-${this.name}`\n  }\n\n  async getFile(path: string) {\n    const response = await this.client.getFile(this.getBucketName(), path)\n    return response\n  }\n\n  async getFileUrl(path: string) {\n    const response = await this.client.getPresignedFileUrl(this.getBucketName(), path)\n    return response\n  }\n\n  async getFileUploadUrl(path: string) {\n    const response = await this.client.getPresignedUploadUrl(this.getBucketName(), path)\n    return response\n  }\n\n  async writeFile(path: string, file: Uint8Array) {\n    const response = await this.client.uploadFile(this.getBucketName(), path, file)\n    return response\n  }\n}", "import { LambdaClient, InvokeCommand } from \"@aws-sdk/client-lambda\";\n\nexport class FunctionsClient {\n  client: LambdaClient;\n  stage: string;\n\n  constructor(stage: string) {\n    this.client = new LambdaClient({\n      endpoint: stage === \"local\" ? \"http://localhost:9000\" : undefined,\n    });\n    this.stage = stage;\n  }\n\n  async call<T extends any>(\n    name: string,\n    payload: any,\n    config: { async: boolean } = { async: false }\n  ): Promise<T> {\n    const command = new InvokeCommand({\n      FunctionName: `${process.env.PROJECT_NAME}-${this.stage}-${name}`,\n      InvocationType: config.async ? \"Event\" : \"RequestResponse\",\n      Payload: Buffer.from(JSON.stringify(payload)),\n    });\n\n    const response = await this.client.send(command);\n    const responseText = new TextDecoder().decode(response.Payload);\n    try {\n      return JSON.parse(responseText) as T;\n    } catch (_) {\n      return responseText as T;\n    }\n  }\n}\n", "import { PrismaClient } from \"@prisma/client\";\nimport { parameterizedEnvVarName } from \"../utils/parameterized-env-var-name\";\n\nexport const getPrismaClient = (name: string) => {\n  const {\n    [parameterizedEnvVarName(name, \"POSTGRES_USERNAME\")]: username,\n    [parameterizedEnvVarName(name, \"POSTGRES_HOST\")]: host,\n    [parameterizedEnvVarName(name, \"POSTGRES_PORT\")]: port,\n    [parameterizedEnvVarName(name, \"POSTGRES_DB_NAME\")]: dbName,\n    [parameterizedEnvVarName(name, \"POSTGRES_PASSWORD\")]: password,\n  } = process.env;\n\n  const DATABASE_URL = `postgres://${username}:${password}@${host}:${port}/${dbName}?connection_limit=1`;\n\n  return new PrismaClient({\n    datasources: {\n      db: {\n        url: DATABASE_URL,\n      },\n    },\n  });\n};\n", "/// <reference lib=\"dom\" />\n\nimport type { AppLoadContext, ServerBuild } from \"@remix-run/node\";\nimport {\n  createRequestHandler as createRemixRequestHandler,\n  readableStreamToString,\n} from \"@remix-run/node\";\nimport type {\n  APIGatewayProxyEventHeaders,\n  APIGatewayProxyEventV2,\n  APIGatewayProxyHandlerV2,\n  APIGatewayProxyStructuredResultV2,\n} from \"aws-lambda\";\n\nimport { isBinaryType } from \"../../utils/binary-types\";\n\n/**\n * A function that returns the value to use as `context` in route `loader` and\n * `action` functions.\n *\n * You can think of this as an escape hatch that allows you to pass\n * environment/platform-specific values through to your loader/action.\n */\nexport type GetLoadContextFunction = (\n  event: APIGatewayProxyEventV2\n) => Promise<AppLoadContext> | AppLoadContext;\n\nexport class RemixApp {\n  createLambdaHandler = (\n    {\n      getLoadContext,\n      build,\n    }: {\n      getLoadContext?: GetLoadContextFunction;\n      build: ServerBuild;\n    }\n  ): APIGatewayProxyHandlerV2 => {\n    const mode = process.env.STAGE === \"local\" ? \"development\" : \"production\";\n    let handleRequest = createRemixRequestHandler(build, mode);\n\n    return async (event) => {\n      try {\n        let request = this.createRemixRequest(event);\n        let loadContext = await getLoadContext?.(event);\n\n        let response = await handleRequest(request, loadContext);\n\n        return this.sendRemixResponse(response);\n      } catch (err) {\n        console.log(err);\n        throw err;\n      }\n    };\n  };\n\n  createRemixRequest(event: APIGatewayProxyEventV2): Request {\n    let host = event.headers[\"x-forwarded-host\"] || event.headers.host;\n    let search = event.rawQueryString.length ? `?${event.rawQueryString}` : \"\";\n    let url = new URL(`http://${host}${event.rawPath}${search}`);\n    let isFormData = event.headers[\"content-type\"]?.includes(\n      \"multipart/form-data\"\n    );\n    // Note: No current way to abort these for Architect, but our router expects\n    // requests to contain a signal so it can detect aborted requests\n    let controller = new AbortController();\n\n    return new Request(url.href, {\n      method: event.requestContext.http.method,\n      headers: this.createRemixHeaders(event.headers, event.cookies),\n      // Cast until reason/throwIfAborted added\n      // https://github.com/mysticatea/abort-controller/issues/36\n      signal: controller.signal,\n      body:\n        event.body && event.isBase64Encoded\n          ? isFormData\n            ? Buffer.from(event.body, \"base64\")\n            : Buffer.from(event.body, \"base64\").toString()\n          : event.body,\n    });\n  }\n\n  createRemixHeaders(\n    requestHeaders: APIGatewayProxyEventHeaders,\n    requestCookies?: string[]\n  ): Headers {\n    let headers = new Headers();\n\n    for (let [header, value] of Object.entries(requestHeaders)) {\n      if (value) {\n        headers.append(header, value);\n      }\n    }\n\n    if (requestCookies) {\n      headers.append(\"Cookie\", requestCookies.join(\"; \"));\n    }\n\n    return headers;\n  }\n\n  async sendRemixResponse(\n    nodeResponse: Response\n  ): Promise<APIGatewayProxyStructuredResultV2> {\n    let cookies: string[] = [];\n\n    // Arc/AWS API Gateway will send back set-cookies outside of response headers.\n    // @ts-expect-error\n    for (let [key, value] of nodeResponse.headers.entries()) {\n      if (key.toLowerCase() === \"set-cookie\") {\n        cookies.push(value);\n      }\n    }\n\n    if (cookies.length) {\n      nodeResponse.headers.delete(\"Set-Cookie\");\n    }\n\n    let contentType = nodeResponse.headers.get(\"Content-Type\");\n    let isBase64Encoded = isBinaryType(contentType);\n    let body: string | undefined;\n\n    if (nodeResponse.body) {\n      if (isBase64Encoded) {\n        body = await readableStreamToString(nodeResponse.body, \"base64\");\n      } else {\n        body = await nodeResponse.text();\n      }\n    }\n\n    return {\n      statusCode: nodeResponse.status,\n      // @ts-expect-error\n      headers: Object.fromEntries(nodeResponse.headers.entries()),\n      cookies,\n      body,\n      isBase64Encoded,\n    };\n  }\n}\n", "/**\n * Common binary MIME types\n * @see https://github.com/architect/functions/blob/45254fc1936a1794c185aac07e9889b241a2e5c6/src/http/helpers/binary-types.js\n */\nconst binaryTypes = [\n  \"application/octet-stream\",\n  // Docs\n  \"application/epub+zip\",\n  \"application/msword\",\n  \"application/pdf\",\n  \"application/rtf\",\n  \"application/vnd.amazon.ebook\",\n  \"application/vnd.ms-excel\",\n  \"application/vnd.ms-powerpoint\",\n  \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n  // Fonts\n  \"font/otf\",\n  \"font/woff\",\n  \"font/woff2\",\n  // Images\n  \"image/avif\",\n  \"image/bmp\",\n  \"image/gif\",\n  \"image/jpeg\",\n  \"image/png\",\n  \"image/tiff\",\n  \"image/vnd.microsoft.icon\",\n  \"image/webp\",\n  // Audio\n  \"audio/3gpp\",\n  \"audio/aac\",\n  \"audio/basic\",\n  \"audio/mpeg\",\n  \"audio/ogg\",\n  \"audio/wav\",\n  \"audio/webm\",\n  \"audio/x-aiff\",\n  \"audio/x-midi\",\n  \"audio/x-wav\",\n  // Video\n  \"video/3gpp\",\n  \"video/mp2t\",\n  \"video/mpeg\",\n  \"video/ogg\",\n  \"video/quicktime\",\n  \"video/webm\",\n  \"video/x-msvideo\",\n  // Archives\n  \"application/java-archive\",\n  \"application/vnd.apple.installer+xml\",\n  \"application/x-7z-compressed\",\n  \"application/x-apple-diskimage\",\n  \"application/x-bzip\",\n  \"application/x-bzip2\",\n  \"application/x-gzip\",\n  \"application/x-java-archive\",\n  \"application/x-rar-compressed\",\n  \"application/x-tar\",\n  \"application/x-zip\",\n  \"application/zip\",\n];\n\nexport function isBinaryType(contentType: string | null | undefined) {\n  if (!contentType) return false;\n  let [test] = contentType.split(\";\");\n  return binaryTypes.includes(test);\n}\n", "import { randomBytes } from \"node:crypto\";\nimport { createWriteStream } from \"node:fs\";\nimport { rm, mkdir } from \"node:fs/promises\";\nimport { tmpdir } from \"node:os\";\nimport { dirname, extname, resolve as resolvePath } from \"node:path\";\nimport { finished } from \"node:stream\";\nimport { promisify } from \"node:util\";\nimport { MaxPartSizeExceededError } from \"@remix-run/server-runtime\";\nimport type { UploadHandler } from \"@remix-run/server-runtime\";\nimport { FileUploadHandlerPathResolver } from \"@remix-run/node/dist/upload/fileUploadHandler\";\n\nlet defaultFilePathResolver: FileUploadHandlerPathResolver = ({ filename }) => {\n  let ext = filename ? extname(filename) : \"\";\n  return \"upload_\" + randomBytes(4).readUInt32LE(0) + ext;\n};\n\nexport function createFileUploadHandler({\n  directory = tmpdir(),\n  file = defaultFilePathResolver,\n  maxPartSize = 3000000,\n} = {}): UploadHandler {\n  return async ({ name, filename, contentType, data }) => {\n    if (!filename) {\n      return undefined;\n    }\n\n    let filedir = resolvePath(directory);\n    let path =\n      typeof file === \"string\" ? file : file({ name, filename, contentType });\n\n    if (!path) {\n      return undefined;\n    }\n\n    let filepath = resolvePath(filedir, path);\n\n    await mkdir(dirname(filepath), { recursive: true }).catch(() => {});\n\n    let writeFileStream = createWriteStream(filepath);\n    let size = 0;\n    let deleteFile = false;\n    try {\n      for await (let chunk of data) {\n        size += chunk.byteLength;\n        if (size > maxPartSize) {\n          deleteFile = true;\n          throw new MaxPartSizeExceededError(name, maxPartSize);\n        }\n        writeFileStream.write(chunk);\n      }\n    } finally {\n      writeFileStream.end();\n      await promisify(finished)(writeFileStream);\n\n      if (deleteFile) {\n        await rm(filepath).catch(() => {});\n      }\n    }\n\n    return filepath\n  };\n}\n", "import {\n  unstable_composeUploadHandlers,\n  unstable_createMemoryUploadHandler,\n  unstable_parseMultipartFormData,\n} from \"@remix-run/node\";\nimport { createFileUploadHandler } from \"./create-file-upload-handler\";\n\nexport const multipartFormData = (request: Request) => {\n  return unstable_parseMultipartFormData(\n    request,\n    unstable_composeUploadHandlers(\n      createFileUploadHandler({\n        maxPartSize: 5_000_000,\n        file: ({ filename }) => filename,\n      }),\n      unstable_createMemoryUploadHandler()\n    )\n  );\n};\n", "import {\n  GetParameterCommand,\n  ParameterType,\n  PutParameterCommand,\n  SSMClient,\n} from \"@aws-sdk/client-ssm\";\n\nexport class SSM {\n  client: SSMClient;\n\n  constructor() {\n    this.client = new SSMClient({});\n  }\n  \n  async getParameter(name: string, decrypt: boolean = false) {\n    const command = new GetParameterCommand({\n      Name: name,\n      WithDecryption: decrypt,\n    });\n    const results = await this.client.send(command);\n    return results.Parameter?.Value ?? \"\";\n  };\n  \n  async putParameter(\n    name: string,\n    value: string,\n    encrypt: boolean = false\n  ) {\n    const command = new PutParameterCommand({\n      Name: name,\n      Value: value,\n      Type: encrypt ? ParameterType.SECURE_STRING : ParameterType.STRING,\n    });\n    await this.client.send(command);\n  };\n}\n\n", "import * as path from \"path\";\n\nexport const SAWS_DIR = path.resolve(\"./.saws\");\nexport const BUILD_DIR = path.resolve(SAWS_DIR, \"build\");\n\nexport const DB_PASSWORD_PARAMETER_NAME = \"db-password\";\nexport const DEV_USER_PASSWORD_PARAMETER_NAME = \"dev-user-password\";\n", "import { SSM } from \"../helpers/aws/ssm\";\nimport { SAWS_DIR } from \"../utils/constants\";\nimport { resolve } from \"node:path\";\nimport { parse, stringify } from \"envfile\";\nimport { promises as fs } from \"fs\";\n\nexport interface SecretsManagerInterface {\n  get(name: string): Promise<string>;\n  set(name: string, value: string): Promise<void>;\n}\n\nlet cache: Record<string, string> = {};\n\nclass LocalSecretsManager implements SecretsManagerInterface {\n  secretsFilePath = resolve(SAWS_DIR, \".secrets\");\n\n  async ensureSecretsFileExists() {\n    try {\n      await fs.stat(this.secretsFilePath);\n    } catch (err) {\n      await fs.writeFile(this.secretsFilePath, \"\");\n    }\n  }\n\n  async fillCache() {\n    await this.ensureSecretsFileExists();\n    if (Object.keys(cache).length === 0) {\n      const secretsFile = await fs.readFile(this.secretsFilePath, {\n        encoding: \"utf-8\",\n      });\n      cache = parse(secretsFile);\n    }\n  }\n\n  async get(name: string) {\n    await this.fillCache();\n    if (cache[name] == null) {\n      const error = new Error(\"Missing\");\n      error.name = \"ParameterNotFound\";\n      throw error;\n    }\n    return cache[name];\n  }\n\n  async set(name: string, value: string) {\n    await this.fillCache();\n    cache[name] = value;\n    await fs.writeFile(this.secretsFilePath, stringify(cache));\n  }\n}\n\nclass ParameterStoreSecretsManager implements SecretsManagerInterface {\n  stage: string;\n  ssmClient: SSM;\n\n  constructor(stage?: string) {\n    this.stage = stage ?? (process.env.STAGE as string);\n    this.ssmClient = new SSM();\n  }\n\n  async get(name: string) {\n    if (cache[name] != null) {\n      return cache[name];\n    }\n\n    const value = await this.ssmClient.getParameter(\n      `/${this.stage}/${name}`,\n      true\n    );\n    cache[name] = value;\n    return value;\n  }\n\n  async set(name: string, value: string) {\n    cache[name] = value;\n    await this.ssmClient.putParameter(`/${this.stage}/${name}`, value, true);\n  }\n}\n\nexport class SecretsManager implements SecretsManagerInterface {\n  manager: SecretsManagerInterface;\n\n  constructor(stage: string) {\n    this.manager =\n      stage === \"local\"\n        ? new LocalSecretsManager()\n        : new ParameterStoreSecretsManager(stage);\n  }\n\n  get(name: string): Promise<string> {\n    return this.manager.get(name);\n  }\n\n  set(name: string, value: string): Promise<void> {\n    return this.manager.set(name, value);\n  }\n}\n", "import { TranslateClient, TranslateTextCommand  } from '@aws-sdk/client-translate'\n\nexport class Translate {\n  client: TranslateClient\n\n  constructor() {\n    this.client = new TranslateClient({})\n  }\n\n  async translateText(text: string, sourceLanguage: string, targetLanguage: string) {\n    const command = new TranslateTextCommand({\n      Text: text,\n      SourceLanguageCode: sourceLanguage,\n      TargetLanguageCode: targetLanguage,\n    })\n\n    const response = await this.client.send(command)\n    return response.TranslatedText\n  }\n}", "import { getPrismaClient } from \"../../../../libraries\";\n\nexport const prisma = getPrismaClient('saws-example-db')\n", "import { FunctionsClient } from \"../../../../libraries\";\n\nexport const functionsClient = new FunctionsClient(process.env.STAGE!)", "import { FileStorage } from \"../../../../libraries\";\n\nexport const files = new FileStorage(\"saws-example-files\");\n", "export default {'entry':{'module':'/public/build/entry.client-NQ3YT2S6.js','imports':['/public/build/_shared/chunk-LBAIJNBE.js','/public/build/_shared/chunk-Y54NFNLJ.js','/public/build/_shared/chunk-NKWASPW3.js','/public/build/_shared/chunk-75IOGHNW.js','/public/build/_shared/chunk-JJMPHSMP.js','/public/build/_shared/chunk-GDS3J3YF.js','/public/build/_shared/chunk-QXY5AXJY.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/public/build/root-4RQKQZTL.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/public/build/routes/_index-XUYX2OLG.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasErrorBoundary':false}},'version':'fc4a240f','hmr':{'runtime':'/public/build/_shared/chunk-NKWASPW3.js','timestamp':1700619460761},'url':'/public/build/manifest-FC4A240F.js'};", "\nimport * as entryServer from \"/Users/matt/code/saws/demo/saws-example-website/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/_index.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"./.saws/build/saws-example-website/public/build\";\n  export const future = {\"v3_fetcherPersist\":false};\n  export const publicPath = \"/public/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route1\n    }\n  };"],
  "mappings": "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",
  "names": ["React", "import_react", "React", "import_node", "createHandler", "resolve", "err", "fs", "mime", "path", "mode", "handleRequest", "createRemixRequestHandler", "resolvePath", "path", "import_node", "import_node_path", "import_fs", "fs", "import_react"]
}
